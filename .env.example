# Development Environment Configuration
# Copy this file to .env and fill in your actual values
# NEVER commit .env with real secrets to version control!
#
# SECURITY WARNING:
# - Use strong, unique passwords for production
# - Rotate secrets regularly  
# - Use environment-specific secrets (dev/staging/prod)
# - Store production secrets securely (e.g., GCP Secret Manager)

# =============================================================================
# REQUIRED: LLM API Keys
# =============================================================================
# Get these from your provider dashboards:
# - Anthropic: https://console.anthropic.com/
# - OpenAI: https://platform.openai.com/api-keys
# - Google: https://makersuite.google.com/app/apikey

ANTHROPIC_API_KEY=sk-ant-your-key-here
OPENAI_API_KEY=sk-your-key-here
GOOGLE_API_KEY=your-google-key-here

# =============================================================================
# Database Configuration
# =============================================================================
# Default: Local PostgreSQL for development
# For production, use a managed database service (e.g., GCP Cloud SQL)

DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/sopherai
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=sopherai

# =============================================================================
# Redis Configuration
# =============================================================================
# Default: Local Redis for development
# For production, use a managed Redis service (e.g., GCP Memorystore)

REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# =============================================================================
# Security
# =============================================================================
# IMPORTANT: Generate secure values for production!
# JWT_SECRET: openssl rand -hex 32
# FERNET_KEY: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"

JWT_SECRET=dev-secret-key-change-in-production
JWT_EXPIRATION_HOURS=1
FERNET_KEY=gAAAAABhZ_generate_proper_key_for_production=

# =============================================================================
# Application Settings
# =============================================================================
ENVIRONMENT=development
LOG_LEVEL=INFO
DEBUG=false
SQL_ECHO=false

# Model selection (primary model for main operations)
PRIMARY_MODEL=claude-3-5-sonnet
SECONDARY_MODEL=gpt-4o
OVERFLOW_MODEL=gemini-1.5-pro

# Cost controls
MONTHLY_BUDGET_USD=100

# =============================================================================
# CORS and Network Configuration
# =============================================================================
# For local development, allow localhost origins
# For production, specify exact domains

CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
ALLOWED_HOSTS=localhost,127.0.0.1

# Frontend configuration
BACKEND_URL=http://localhost:8000
NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME=Sopher.AI
NEXT_PUBLIC_APP_VERSION=1.0.0
NEXT_PUBLIC_ENVIRONMENT=development

# =============================================================================
# Optional: Monitoring and Metrics
# =============================================================================
METRICS_ENABLED=true
PROMETHEUS_PORT=9000
prometheus_multiproc_dir=/tmp/prometheus

# =============================================================================
# Optional: Rate Limiting
# =============================================================================
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_BURST=120

# =============================================================================
# Optional: SSE Streaming Configuration
# =============================================================================
SSE_KEEPALIVE_INTERVAL=30
SSE_RETRY_INTERVAL=5000

# =============================================================================
# Optional: Worker Configuration (for production)
# =============================================================================
# BACKEND_WORKERS=4
# WORKER_CONNECTIONS=1000

# =============================================================================
# Optional: Analytics (if using)
# =============================================================================
# NEXT_PUBLIC_ANALYTICS_ID=your-analytics-id-here

# =============================================================================
# Docker Compose Specific (if using docker-compose)
# =============================================================================
# These are used by docker-compose.dev.yml
# Uncomment if using Docker Compose for development

# COMPOSE_PROJECT_NAME=sopherai
# DOCKER_BUILDKIT=1
# COMPOSE_DOCKER_CLI_BUILD=1

# =============================================================================
# Notes for Developers
# =============================================================================
# 1. Minimum required variables to get started:
#    - ANTHROPIC_API_KEY, OPENAI_API_KEY, GOOGLE_API_KEY
#    - DATABASE_URL (or use default localhost)
#    - REDIS_URL (or use default localhost)
#    - JWT_SECRET (use default for dev, generate for prod)
#
# 2. For Docker Compose development:
#    - cd infra && docker-compose -f docker-compose.dev.yml up
#    - Most variables have defaults in docker-compose.dev.yml
#
# 3. For local development without Docker:
#    - Install PostgreSQL and Redis locally
#    - Run: cd backend && pip install -e .[dev] && uvicorn app.main:app --reload
#    - Run: cd frontend && npm install && npm run dev
#
# 4. For production deployment:
#    - See infra/.env.production.template for comprehensive production config
#    - Use GCP Secret Manager or similar for storing secrets
#    - Never expose API keys in client-side code