name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sopherai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run linting
      working-directory: ./backend
      run: |
        ruff check app tests
        black --check app tests
        mypy app
    
    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/sopherai_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Build
      working-directory: ./frontend
      run: npm run build

  # Build and Push Docker Images
  docker-build:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement=network.host
          --allow-insecure-entitlement=security.insecure
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=${{ matrix.component }}
          type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-${{ matrix.component }}:cache
        cache-to: |
          type=gha,mode=max,scope=${{ matrix.component }}
          type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-${{ matrix.component }}:cache,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-${{ matrix.component }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to GKE (Production)
  deploy-production:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository_owner == 'cheesejaguar'
    environment:
      name: production
      url: https://sopher.ai
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for GCP credentials
      id: check-gcp
      run: |
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "::warning::GCP_SA_KEY secret not configured. Skipping deployment."
          echo "has_credentials=false" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "::notice::GCP credentials found. Proceeding with deployment."
          echo "has_credentials=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Authenticate to Google Cloud
      if: steps.check-gcp.outputs.has_credentials == 'true'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      if: steps.check-gcp.outputs.has_credentials == 'true'
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Install GKE auth plugin
      if: steps.check-gcp.outputs.has_credentials == 'true'
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet
    
    - name: Configure kubectl
      if: steps.check-gcp.outputs.has_credentials == 'true'
      run: |
        # Configure kubectl to connect to GKE cluster
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
          --zone ${{ secrets.GKE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT }}
        
        # Enable using the GKE auth plugin
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        
        # Set kubectl timeout to handle network latency
        kubectl config set-context --current --request-timeout=120s
    
    - name: Verify cluster connectivity
      if: steps.check-gcp.outputs.has_credentials == 'true'
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: 'True'
      run: |
        echo "Verifying cluster connectivity..."
        for i in {1..5}; do
          if kubectl get namespaces --request-timeout=30s; then
            echo "Successfully connected to cluster"
            kubectl get nodes || true
            break
          else
            echo "Connection attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          if [ $i -eq 5 ]; then
            echo "Failed to connect to cluster after 5 attempts"
            echo "Cluster info:"
            kubectl cluster-info dump || true
            exit 1
          fi
        done
    
    - name: Deploy to Kubernetes
      if: steps.check-gcp.outputs.has_credentials == 'true'
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: 'True'
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        FERNET_KEY: ${{ secrets.FERNET_KEY }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace sopher-ai --dry-run=client -o yaml | kubectl apply -f -
        
        # Install NGINX Ingress Controller if not present
        echo "Checking for NGINX Ingress Controller..."
        if ! kubectl get deployment ingress-nginx-controller -n ingress-nginx >/dev/null 2>&1; then
          echo "Installing NGINX Ingress Controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
          echo "Waiting for NGINX Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s
        else
          echo "NGINX Ingress Controller already installed"
        fi
        
        # Apply secrets with environment variable substitution
        echo "Applying Kubernetes secrets..."
        for i in {1..3}; do
          if envsubst < infra/k8s/secret.yaml | kubectl apply --validate=false -f -; then
            echo "Successfully applied secrets"
            break
          else
            echo "Failed to apply secrets (attempt $i/3), retrying in 5 seconds..."
            sleep 5
          fi
          if [ $i -eq 3 ]; then
            echo "Failed to apply secrets after 3 attempts"
            exit 1
          fi
        done
        
        # Apply all Kubernetes manifests in order
        echo "Deploying PostgreSQL..."
        kubectl apply -f infra/k8s/postgres-service.yaml
        kubectl apply -f infra/k8s/postgres-deployment.yaml
        
        echo "Deploying Redis..."
        kubectl apply -f infra/k8s/redis-service.yaml
        kubectl apply -f infra/k8s/redis-deployment.yaml
        
        echo "Deploying API backend..."
        kubectl apply -f infra/k8s/api-service.yaml
        kubectl apply -f infra/k8s/api-deployment.yaml
        
        echo "Deploying Web frontend..."
        kubectl apply -f infra/k8s/web-service.yaml
        kubectl apply -f infra/k8s/web-deployment.yaml
        
        echo "Deploying Ingress..."
        kubectl apply -f infra/k8s/ingress.yaml
        
        # Update image tags to latest commit
        kubectl set image deployment/sopher-api \
          api=${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-backend:${{ github.sha }} \
          -n sopher-ai
        
        kubectl set image deployment/sopher-web \
          web=${{ env.REGISTRY }}/${{ github.repository_owner }}/sopher-frontend:${{ github.sha }} \
          -n sopher-ai
        
        # Wait for rollout
        kubectl rollout status deployment/sopher-api -n sopher-ai --timeout=300s
        kubectl rollout status deployment/sopher-web -n sopher-ai --timeout=300s
        
        # Verify deployment status
        echo "Checking deployment status..."
        kubectl get pods -n sopher-ai
        kubectl get services -n sopher-ai
        kubectl get ingress -n sopher-ai
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test API health
        curl -f https://api.sopher.ai/healthz || exit 1
        
        # Test web health
        curl -f https://sopher.ai || exit 1

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript-typescript']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before || 'HEAD~1' }}
        head: ${{ github.sha }}
        extra_args: --only-verified
      continue-on-error: true